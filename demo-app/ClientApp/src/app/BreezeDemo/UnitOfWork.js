"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var breeze_client_1 = require("breeze-client");
//// Specifying providers can be done as shown below (as opposed to being done in the NgModule
//// declaration).  But this could cause problems.  In particular there was some conflict with
//// Ngrx.
//@Injectable({
//    providedIn: NgrxPlusBreezeModule
//})
var UnitOfWork = /** @class */ (function () {
    // Construction.
    function UnitOfWork(
    // Here everything is injected.  However an alternative is to inject only the UnitOfWork
    // and then instantiate all of the repositories in the constructor.  See the commented
    // out code below.
    entityManager, courses, students, enrollments, teachers) {
        var _this = this;
        this.entityManager = entityManager;
        this.courses = courses;
        this.students = students;
        this.enrollments = enrollments;
        this.teachers = teachers;
        // Instance variables.
        //private readonly classes: CourseRepository = new CourseRepository();
        //private readonly students: StudentRepository = new StudentRepository();
        //private readonly enrollments: EnrollmentRepository = new EnrollmentRepository();
        // When EntityManager.fetchMetadata() is called the result is store in 'schema'; or if there
        // is a error then the error is stored in 'error'.
        this.schema = null;
        this.error = null;
        this.metadataLoadedCallback = null;
        rxjs_1.from(this.entityManager.fetchMetadata()).subscribe(function (schema) {
            _this.schema = schema;
            console.log(schema);
            // All entity types will have there unique IDs determime by the back-end database.
            var entityTypes = _this.entityManager.metadataStore.getEntityTypes();
            for (var _i = 0, entityTypes_1 = entityTypes; _i < entityTypes_1.length; _i++) {
                var entityType = entityTypes_1[_i];
                if (entityType instanceof breeze_client_1.EntityType) {
                    entityType.setProperties({
                        autoGeneratedKeyType: breeze_client_1.AutoGeneratedKeyType.Identity
                    });
                }
            }
            // Invoke method that is called when loading of metadata has completed.
            if (_this.metadataLoadedCallback != null)
                _this.metadataLoadedCallback();
        }, function (error) {
            console.log(error);
            _this.error = error;
        });
        //this.courses = new CourseRepository();
        //this.students = new StudentRepository();
        //this.enrollments = new EnrollmentRepository();
    }
    Object.defineProperty(UnitOfWork.prototype, "Courses", {
        // Property Accessors.
        get: function () {
            return this.courses;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitOfWork.prototype, "Students", {
        get: function () {
            return this.students;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitOfWork.prototype, "Enrollments", {
        get: function () {
            return this.enrollments;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitOfWork.prototype, "Teachers", {
        get: function () {
            return this.teachers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitOfWork.prototype, "MetadataLoadedCallback", {
        set: function (value) {
            this.metadataLoadedCallback = value;
        },
        enumerable: true,
        configurable: true
    });
    // Methods
    UnitOfWork.prototype.SaveChanges = function () {
        var _this = this;
        console.log("Courses before");
        var entityType = this.entityManager.metadataStore.getEntityType("Course");
        for (var _i = 0, _a = this.entityManager.getEntities([entityType], [breeze_client_1.EntityState.Added, breeze_client_1.EntityState.Unchanged, breeze_client_1.EntityState.Modified]); _i < _a.length; _i++) {
            var e = _a[_i];
            console.log(e);
        }
        if (this.entityManager.hasChanges) {
            this.entityManager.saveChanges()
                .then(function (saveResult) {
                console.log(saveResult);
                console.log("Courses after");
                var entityType = _this.entityManager.metadataStore.getEntityType("Course");
                for (var _i = 0, _a = _this.entityManager.getEntities([entityType], [breeze_client_1.EntityState.Added, breeze_client_1.EntityState.Unchanged, breeze_client_1.EntityState.Modified]); _i < _a.length; _i++) {
                    var e = _a[_i];
                    console.log(e);
                }
            })
                .catch(function (error) {
                console.log(error);
            });
        }
    };
    return UnitOfWork;
}());
exports.UnitOfWork = UnitOfWork;
//# sourceMappingURL=UnitOfWork.js.map