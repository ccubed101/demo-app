# escape=`
# The above parser directive changes escape character from '\' to '`'.  Note this line must come before any other lines except other parser directives.

# dockerfile-prod-dotnet-iis-base
#
# This is the base image for all images that are used to create container instances
# that use Internet Information Services (IIS) to host a web app or a web service.
# So, for example, if you have 2 web apps and 3 web service then there will be 2 + 3
# image which have this image as a starting point.
#
# Build command:
#	docker build --force-rm -t <desired image name> -f <path to this dockerfile> .
#
#	Example:
#		docker build --force-rm -m=5g -f "D:\Code Projects\demo-app\docker\Production\dockerfile-prod-dotnet-iis-base" -t prod-dotnet-iis-base:1.0.0 "D:\Code Projects\demo-app\docker\Production"
#
#			(Note that the "-m=5g" is required above; without it you run out of memory.)
#
# Run command: 
#	docker run --rm -v '<Full path to directory on host>:<Full path to directory in container>' --name <desired name of container> <Name of image>
#
#	Examples:
#		docker run --rm -d -m=5g -t --name prod-dotnet-iis-base prod-dotnet-iis-base:1.0.0
#
# Use the following to get the IP address of a Docker container:
#
#		docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' prod-dotnet-iis-base
#
# Notes:
#
#   >> There is no need to specify an ENTRYPOINT in this Dockerfile since the microsoft/iis base image 
#      already includes an entrypoint application that monitors the status of the IIS World Wide Web 
#      Publishing Service (W3SVC). 
#   >> you can't use http://localhost to browse the site from the container host. This is because of 
#      a known behavior in WinNAT, and will be resolved in future. Until that is addressed, you need to 
#      use the IP address of the container.
#   >> So the following will not work:
#      >> localhost
#      >> localhost:443
#      >> http://localhost
#      >> https://localhost
#      >> localhost:9007
#      >> https://localhost:9007

# Need microsoft/windowsservercore base image because it has PowerShell and System.Net.WebClient.
FROM microsoft/windowsservercore

# Install .NET Core.  Appropriate addition to PATH will be made during installation.
ADD dotnet-sdk-3.0.101-win-x64.exe .
RUN dotnet-sdk-3.0.101-win-x64 -q

# Install Chocolatey so that we can do an unattended installation of Git.
# See https://chocolatey.org/install for more information.
RUN PowerShell Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# Do unattended installation of Git using Chocolatey.
RUN choco install -y git.install
	 
# Setup for communicating with GitHub
RUN git config --global user.name "ccubed101"
RUN git config --global user.email "ccubed101@gmail.com"

# Install NodeJS
ENV NODE_VERSION 10.9.0
RUN PowerShell Invoke-WebRequest $('https://nodejs.org/dist/v{0}/node-v{0}-win-x64.zip' -f $env:NODE_VERSION) -OutFile 'node.zip' -UseBasicParsing ; `
     Expand-Archive node.zip -DestinationPath C:\ ; `
     Rename-Item -Path $('C:\node-v{0}-win-x64' -f $env:NODE_VERSION) -NewName 'C:\nodejs'

# Make additions to PATH environment variable for NodeJS.  Don't need to add anything for Git because that was done as part of installation.
RUN PowerShell setx /M PATH $($Env:PATH + ';C:\nodejs')

# Install IIS.
RUN PowerShell Install-WindowsFeature -Name Web-Server

# Install the .NET Core Hosting Bundle.  Note that the hosting bundle must be 
# installed AFTER IIS is installed.  (The Hosting Bundle should be added here 
# if the intention is to use the "microsoft/windowsservercore" base image (see
# above).  If the "mcr.microsoft.com/windows/servercore/iis" base is to be used
# (or some other base image) then installing the Hosting Bundle here is not 
# necessary.
ADD dotnet-hosting-3.0.1-win.exe .
RUN dotnet-hosting-3.0.1-win -q