# escape=`
# The above parser directive changes escape character from '\' to '`'.  Note this line must come before any other lines except other parser directives.

# dockerfile-production-kestral
#
# Given the path to the root directory of a local ASP.NET Core application project (i.e. the 
# path to the directory that contains the solution (.sln) file) build an image that publishes
# a "Release" configuration of the application to a location within the image such that
# when the image is run the resulting container will server the application using the built-in
# Kestral server.
#
# Build command (execute in the directory that contains the Dockerfile)
#	docker build --force-rm -t <desired image name> -f <path to this dockerfile> <path to context>
#
#	Example:
#		docker build --force-rm -f "D:\Code Projects\demo-app\docker\production-kestral\dockerfile-production-kestral" -t demo-app-prod-kestral:latest "D:\Code Projects\demo-app"
#
# Run command: 
#	docker run --rm --name <name of container> <name of image> <optional command>
#	
#		docker run --rm --name demo-app-prod-kestral demo-app-prod-kestral
#		docker run --rm -it --name demo-app-prod-kestral demo-app-prod-kestral						(-it is not strictly necessary.  Behavior will be different but will not make a difference.)
#
# Use the following to get the IP address of a Docker container:
#
#	docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' demo-app-prod-kestral
#


# NOTE: A "FROM" command must precede EVERY other command.

# Need microsoft/windowsservercore base image because it has PowerShell and System.Net.WebClient.
FROM microsoft/windowsservercore AS forNodeInsall

# Install NodeJS
ENV NODE_VERSION 10.9.0
RUN PowerShell Invoke-WebRequest $('https://nodejs.org/dist/v{0}/node-v{0}-win-x64.zip' -f $env:NODE_VERSION) -OutFile 'node.zip' -UseBasicParsing ; `
     Expand-Archive node.zip -DestinationPath C:\ ; `
     Rename-Item -Path $('C:\node-v{0}-win-x64' -f $env:NODE_VERSION) -NewName 'C:\nodejs'
	 
# Need dotnet.exe to publish the application.  
# (NOTE: microsoft/dotnet:sdk image does not have PowerShell!!!)
FROM microsoft/dotnet:sdk

# Bring along Nodejs to the new image.
RUN mkdir nodejs
COPY --from=forNodeInsall nodejs nodejs

# Append path for NodeJS to PATH environment variable. 
RUN setx Path "%Path%;C:\nodejs"

# arguments:
arg pathtopublish=c:\publish
arg pathtoproject=c:\project

# programmer note: how do you consume args in a dockerfile?  the rules are complicated.  
# assume that we have the following command: 
#	arg argname
# then it depends on whether we are talking about 
# 1. docker commands
#    use $argname or ${argname} 
# 2. powershell commands
#    use $env:argname
# 3. cmd commands
#    use %argname
# note that it is important to be aware of whether powershell is in effect or cmd is in effect.
# examples:
#	1. powershell
#	   shell ["powershell", "-command"]
#	   run echo $env:argname
#	   run new-item -itemtype directory -path $env:argname
#	   run mkdir $env:argname
#   2. cmd
#      shell ["cmd", "/s", "/c"]
#	   run echo %argname%
#      run mkdir %argname%
# note that the run command executes either cmd or powershell commands.
# note that some base images do not make powershell available.
# note that arg commands apply to the image that is in effect.  in other words arg commands that precede a from command are not applicable to the image specified in the from command.

# create directory that project will be copied into.
run mkdir %pathtoproject%

# Copy the project into the image.
# "." refers to the context specified in the "docker build" command.  It is the directory that contains the .sln file.
# The entire project is in that directory or one of the child directories and all of those directories are copied into
# the image.  There is one exception.  The "./demo-app/ClientApp/node_modules/@angular/cli/" directory will not be copied.
# It will not be copied because it is listed in the ".dockerignore" file in the same directory that contains the solution
# (.sln) file.  This directory is not copied because the only way to get the Angular CLI to work correctly in the 
# container is to not copy the directory and then install the Angular CLI as part of the image build process  (see below).
add . ${pathtoproject}

# Make the directory that contains the client-side Angular app the current directory.
WORKDIR C:\project\demo-app\ClientApp

# The following command will install the most recent version of the Angular CLI.  However if a 
# package.json file is present it will install the version of the CLI specified in package.json.  As
# of 8/20/2019 the version being used on my machine is 8.2.2.  
RUN npm install @angular/cli

# Build the server side rendering code.  It will be placed in the "C:/project/demo-app/ClientApp/dist-server" directory.
RUN npm run build:ssr

# Publish the application to the specified location in the image.
RUN dotnet publish %pathToProject%\demo-app.sln -c Release -o %pathToPublish%

# Because the application includes server-side rendering (SSR), which depends on 
# packages in the "node_modules" directory, the "node_modules" directory must be 
# copied to the "ClientApp" directory under the directory to where the application
# was published.
RUN mkdir %pathToPublish%\ClientApp\node_modules
RUN xcopy /Q /S %pathToProject%\demo-app\ClientApp\node_modules %pathToPublish%\ClientApp\node_modules

# Serve the application when the container is run.
# Make sure the working directory is the directory that contains the demo-app.dll file.  (If that 
# is not the case then you will get an error that says the "index.html" file cannot be found.  The 
# reason for the error is that demo-app.dll will look for the file in ".\ClientApp\dist"--as specified
# in the ConfigureServices() method in the Startup class in the Startup.cs file.) 
WORKDIR C:\publish
CMD dotnet demo-app.dll